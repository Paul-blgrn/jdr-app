name: Laravel Tests

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    permissions:
      actions: write
      checks: write
      contents: write
      id-token: write
      pull-requests: write
      repository-projects: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Copy .env for PHPUnit/Pest
        run: php -r "file_exists('.env.testing') || copy('.env.example', '.env.testing');"

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Generate key for PHPUnit/Pest
        run: php artisan key:generate --env=testing

      - name: Build assets with Vite
        run: npm install && npm run build  # Assurez-vous que Vite est correctement configuré pour votre application

      - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'  # Utilisation de SQLite en mémoire
        run: php artisan test --log-junit tests/results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: tests/results.xml

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Check if test results file exists
        run: |
          if [ ! -f tests/results.xml ]; then
            echo "Test results file not found!"
            exit 1
          fi
          cat tests/results.xml

      - name: Extract test information
        id: extract_test_info
        run: |
          PASS=$(grep -oP '(?<=testsuites tests=")\d+' tests/results.xml || echo "0")
          TODO=$(grep -oP '(?<=<testsuite name=".*" tests="\d+" skipped=")(\d+)(?=" errors="0" failures="0")' tests/results.xml | awk '{s+=$1} END {print s}' || echo "0")
          SKIP=$(grep -oP '(?<=<testsuite name=".*" tests="\d+" skipped="0" errors="0" failures="0" timestamp=").*(?=" time=)' tests/results.xml | wc -l || echo "0")
          echo "PASS: $PASS"
          echo "TODO: $TODO"
          echo "SKIP: $SKIP"
          echo "::set-output name=pass::$PASS"
          echo "::set-output name=todo::$TODO"
          echo "::set-output name=skip::$SKIP"

      - name: Update README with Badge URLs
        run: |
          PASS=${{ steps.extract_test_info.outputs.pass }}
          TODO=${{ steps.extract_test_info.outputs.todo }}
          SKIP=${{ steps.extract_test_info.outputs.skip }}
          BADGE_PASS="![Tests Passed](https://img.shields.io/badge/tests_passed-${PASS}-brightgreen?style=flat-square)"
          BADGE_TODO="![Tests TODO](https://img.shields.io/badge/tests_todo-${TODO}-yellow?style=flat-square)"
          BADGE_SKIP="![Tests Skipped](https://img.shields.io/badge/tests_skip-${SKIP}-lightgrey?style=flat-square)"
          echo "Updating README with badges"
          sed -i "s|!\[Tests Passed\](.*)|${BADGE_PASS}|g" README.md
          sed -i "s|!\[Tests TODO\](.*)|${BADGE_TODO}|g" README.md
          sed -i "s|!\[Tests Skipped\](.*)|${BADGE_SKIP}|g" README.md

      - name: Commit and push updated README
        if: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update README with test badges"
          git push origin HEAD:${{ github.ref }}
